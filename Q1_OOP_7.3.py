# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических
# операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.


class Cell:
    def __init__(self, nucleus):
        self.nucleus = nucleus

    "Перегрузка методов. Результат - новый экземпляр класса, новая клетка"

    # Сложение. Объединение двух клеток.
    # При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
    def __add__(self, other):
        return Cell(self.nucleus + other.nucleus)

    # Вычитание. Участвуют две клетки.
    # Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
    # иначе выводить соответствующее сообщение.
    def __sub__(self, other):
        if (self.nucleus - other.nucleus) > 0:
            return Cell(self.nucleus - other.nucleus)
        else:
            return f"Вычитание не применимо к данным клеткам"

    # Умножение. Создается общая клетка из двух.
    # Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
    def __mul__(self, other):
        return Cell(self.nucleus * other.nucleus)

    # Деление. Создается общая клетка из двух.
    # Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
    def __truediv__(self, other):
        if other.nucleus != 0:
            return Cell(self.nucleus // abs(other.nucleus))
        else:
            return f"Деление не возможно!"

    # В классе необходимо реализовать метод make_order(),
    # принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
    # Метод должен возвращать строку вида *****\n*****\n*****...,
    # где количество ячеек между \n равно переданному аргументу.
    """
    Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
    Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
    Тогда метод make_order() вернет строку: *****\n*****\n**.
    Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
    Тогда метод make_order() вернет строку: *****\n*****\n*****.
    """

    def make_order(self, line=5):
        nucleus_code = '*' * self.nucleus
        start = 0
        end = len(nucleus_code)
        full_code = ''
        for _ in range(1, end + 1, line):
            full_code += f'{(nucleus_code[start:line + start])}\n'
            start += line
        return full_code


my_cell_1 = Cell(12)
my_cell_2 = Cell(6)
print(f'Первая клетка - {my_cell_1.nucleus} яч.\n{my_cell_1.make_order()}')
print(f'Вторая клетка - {my_cell_2.nucleus} яч.\n{my_cell_2.make_order()}')

my_cell_3 = my_cell_1 + my_cell_2
print(f'Результат сложения - {my_cell_3.nucleus} яч.\n{my_cell_3.make_order()}')

my_cell_3 = my_cell_1 - my_cell_2
print(f'Результат вычитания - {my_cell_3.nucleus} яч.\n{my_cell_3.make_order()}')

my_cell_3 = my_cell_1 * my_cell_2
print(f'Результат умножения - {my_cell_3.nucleus} яч.\n{my_cell_3.make_order()}')

my_cell_3 = my_cell_1 / my_cell_2
print(f'Результат деления - {my_cell_3.nucleus} яч.\n{my_cell_3.make_order()}')
